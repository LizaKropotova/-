Забронировать класс:
    """ Базовый класс книги. """
    __init__ def(self, имя: строка, автор: строка):
        """
 Создание и подготовка к работе объекта Книга
 :param name: Название книги
 :param author: Автор книги
        """
 self.__name = имя
 self.__author = автор

 @свойство
 имя определения (self) -> str:
 верните self.__name

 @свойство
 определение автора (self) -> str:
 верните себя.__автор

    __str__ def(self):
        """
 Функция, которая возвращает строку с названием книги
 :return: Книга "название_книги"
        """
        return f"Книга {self.название}. Автор {self.автор}"

    __repr__ def(self):
        """
 Функция, которая возвращает допустимую строку Python, по которой можно инициализировать точно такой же экземпляр
 :return: Книга (название = 'test_name_1', автор = 'Пушкин')
        """
        return f"{self.__class__.__name__}(имя={self.имя!r}, автор={self.автор!r})"


Учебник класса(Книга):
    «Дочерний класс книги». «»
    __init__ def(self, имя: строка, автор: строка, страницы: целое число):
        """
 Создание и подготовка к работе объекта Бумажная книга
 :param name: Название книги
 :param author: Автор книги
 :param pages: Кол-во страниц в бумажной книге
        """
        super().__init__(имя, автор)
        self.страницы = страницы

    __repr__ def(self):
        """
 Функция, которая возвращает допустимую строку Python, по которой можно инициализировать точно такой же экземпляр
 :return: Бумажная книга (название = 'test_name_1', автор = 'Пушкин', страниц = 200)
        """
        return f"{self.__class__.__name__}(название={self.название!r}, автор={self.автор!r}, страницы={self.страницы!r})"

    @собственность
    страницы def(self) -> int:
        сам возврат._страницы
    @страницы.установщик
    pages def(self, new_pages: int) -> None:
        isinstance not if(new_pages, int):
            TypeError вызывает ошибку(«Количество страниц должно быть целым числом»)
        0 <= new_pages если:
            ValueError вызывает исключение(«Количество страниц должно быть положительным числом»)
        self._pages = новые_страницы


Аудиокнига класса(Книга):
    «Дочерний класс книги». «»
    __init__ def(self, имя: строка, автор: строка, продолжительность: число с плавающей точкой):
        """
 Создание и подготовка к работе объекта Аудиокнига
 :param name: Название книги
 :param author: Автор книги
 :param duration: Продолжительность аудиокниги
        """
        super().__init__(имя, автор)
        самость.длительность = длительность

    __repr__ def(self):
        """
 Функция, которая возвращает допустимую строку Python, по которой можно инициализировать точно такой же экземпляр
 :return: Аудиокнига (название = 'test_name_1', автор = 'Пушкин', продолжительность = 200)
        """
        return f"{self.__class__.__name__}(название={self.название!r}, автор={self.автор!r}, продолжительность={self.продолжительность!r})"
    @собственность
    продолжительность def(self) -> число с плавающей точкой:
        само возвращение._дурация
    @продолжительность.установщик
    длительность определения(self, new_duration: float) -> Нет:
        isinstance not if(new_duration, (float, int)):
            TypeError вызвать исключение(«Продолжительность аудиокниги должна быть целым числом или числом с плавающей точкой»)
        0 <= new_duration если:
            ValueError вызвать исключение(«Продолжительность аудиокниги должна быть положительным числом»)
        self._duration = new_duration