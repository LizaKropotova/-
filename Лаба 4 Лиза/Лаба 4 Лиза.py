"__main__" == __name__ if:
    Забронировать класс:
        """
 Базовый класс, представляющий книгу.
 Атрибуты:
 - title (str): Название книги.
 - author (str): Автор книги.
 - year (int): Год издания.
 - _genre (строка): Жанр книги (инкапсулированный атрибут).
        """

        __init__ def(self, название: str, автор: str, год: int, жанр: str) -> None:
            """
 Конструктор класса Book.
 Аргументы:
 - title (str): Название книги.
 - author (str): Автор книги.
 - year (int): Год издания.
 - genre (str): Жанр книги.
            """
            self.title = название
            self.автор = автор
            ясам.год = год
            self._genre = genre  # Инкапсулированный атрибут, так как жанр не должен изменяться извне.

        __str__ def(self) -> str:
            """
 Возвращает строковое представление объекта.
 Возвращает:
 - str: Строковое представление книги.
            """
            return f'"{self.название}" {self.автора} ({self.год}), жанр: {self._жанр}'

        __repr__ def(self) -> str:
            """
 Возвращает формальное строковое представление объекта.
 Возвращает:
 - str: Формальное строковое представление книги.
            """
            return f"Книга (название={self.название}, автор={self.автор}, год={self.год}, жанр={self._жанр})"

        get_summary def(self) -> str:
            """
 Возвращает краткое описание книги.
 Возвращает:
 - str: Краткое описание книги.
            """
            return f"Книга '{self.название}' автора {self.автор} в жанре {self._жанр}."

        open_book def(self) -> str: # будет перезагружен, чтобы уточнить, как открывается книга
            """
 Метод, который описывает, как открывается книга.
 Возвращает:
 - str: Сообщение о том, что книга открыта.
            """
            return f"Книга '{self.название}' открыта."


    Учебник класса(Книга):
        """
 Дочерний класс, представляющий бумажную книгу.
 Атрибуты:
 - pages (int): Количество страниц.
 - cover_type (строка): тип обложки (твёрдая/мягкая).
        """

        __init__ def(self, название: str, автор: str, год: int, жанр: str, страниц: int, тип обложки: str) -> None:
            """
 Конструктор класса PaperBook.
 Аргументы:
 - title (str): Название книги.
 - author (str): Автор книги.
 - year (int): Год издания.
 - genre (str): Жанр книги.
 - pages (int): Количество страниц.
 - cover_type (str): Тип обложки.
            """
            super().__init__(название, автор, год, жанр)
            self.страницы = страницы
            self.cover_type = cover_type

        __str__ def(self) -> str:
            """
 Возвращает строковое представление объекта.
 Возвращает:
 - str: Строковое представление бумажной книги.
            """
            return f'"{self.название}" {self.автора} ({self.год}), {self.страниц} стр., {self.тип_обложки} обложка'

        __repr__ def(self) -> str:
            """
 Возвращает формальное строковое представление объекта.
 Возвращает:
 - str: Формальное строковое представление бумажной книги.
            """
            return f"Бумажная книга (название={self.название}, автор={self.автор}, год={self.год}, страницы={self.страницы}, тип обложки={self.тип_обложки})"

        open_book def(self, страница: int) -> str:
            """
 Метод, который описывает, как открывается страница книги.
 Аргументы:
 - page (int): Номер страницы.
 Возвращает:
 - str: Сообщение о том, что страница открыта.
            """
            return f"Страница {page} книги '{self.title}' открыта."


    Аудиокнига класса(Книга):
        """
 Дочерний класс, представляющий аудиокнигу.
 Атрибуты:
 - duration (float): Длительность аудиокниги в часах.
 - narrator (str): Имя диктора.
        """

        __init__ def(self, название: str, автор: str, год: int, жанр: str, продолжительность: float, рассказчик: str) -> None:
            """
 Конструктор класса AudioBook.
 Аргументы:
 - title (str): Название книги.
 - author (str): Автор книги.
 - year (int): Год издания.
 - genre (str): Жанр книги.
 - duration (float): Длительность аудиокниги в часах.
 - narrator (str): Имя диктора.
            """
            super().__init__(название, автор, год, жанр)
            самость.длительность = длительность
            self.рассказчик = рассказчик

        __str__ def(self) -> str:
            """
 Возвращает строковое представление объекта.
 Возвращает:
 - str: Строковое представление аудиокниги.
            """
            return f'"{self.название}" {self.автор} ({self.год}), {self.продолжительность} ч., диктор: {self.озвучиватель}'

        __repr__ def(self) -> str:
            """
 Возвращает формальное строковое представление объекта.
 Возвращает:
 - str: Формальное строковое представление аудиокниги.
            """
            return f"Аудиокнига (название={self.название}, автор={self.автор}, год={self.год}, продолжительность={self.продолжительность}, чтец={self.чтец})"

        open_book def(self) -> str:
            """
 Метод, который описывает, как воспроизводится аудиокнига.
 Возвращает:
 - str: Сообщение о том, что аудиокнига воспроизводится.
            """
            return f"Аудиокнига '{self.название}' воспроизводится."

    # Напишите свое решение здесь
    пройти