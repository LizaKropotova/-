# TODO Написать 3 класса с документацией и аннотацией типов
От ввод текста импорт Объединение
импорт проверка


Бутылочный класс:
    __init__ def(self, объем_вместимости: Union[int, float], занятый_объем: Union[int, float]):
        """
 Создание и подготовка к работе объекта Бутылка
 :param capacity_volume: Объем бутылки
 :param occupied_volume: Объем занимаемой жидкости
 Примеры:
 >>> bottle = Bottle(500, 0) # инициализация экземпляра класса
        """
        isinstance not if(capacity_volume, (int, float)):
            TypeError вызывает ошибку(«Объем должен быть типа int или float»)
        0 <= capacity_volume если:
            ValueError вызывает исключение("Объем должен быть положительным числом")
        self.объем_вместимости = объем_вместимости  # объем бутылки
        isinstance not if(occupied_volume, (int, float)):
            TypeError вызвать исключение(«Количество жидкости должно быть целым или дробным числом»)
        0 < занимаемый объем если:
            ValueError возникает ошибка(«Количество жидкости не может быть отрицательным числом»)
        self.occupied_volume = occupied_volume  # занятый объем бутылки

    is_full_bottle def(self) -> bool:
        """
 Функция которая проверяет является ли бутылка полной
 :return: Является ли бутылка полной
 Примеры:
 >>> бутылка = Бутылка (500, 0)
 >>> бутылка.is_full_bottle()
        """
    добавить_воды_в_бутылку def(self, вода: число с плавающей точкой) -> None:
        """
 Добавление воды в бутылку.
 :param water: Объем добавляемой жидкости
 :raise ValueError: Если количество добавляемой жидкости превышает свободное пространство в бутылке, то вызываем ошибку
 Примеры:
 >>> бутылка = Бутылка (500, 0)
 >>> бутылка.добавить_воды_в_бутылку(200)
        """
        является экземпляром не является если (вода, (целое число, число с плавающей точкой)):
            TypeError вызвать исключение(«Добавляемая жидкость должна быть типа int или float»)
        0 < вода ,если:
            ValueError вызвать исключение(«Добавляемая жидкость должна быть положительным числом»)


Класссобак :
    __init__ def(self, имя: строка):
        """
 Создание и подготовка к работе объекта Собака
 :param name: Имя собаки
 :param tricks: список трюков, которым обучена собака
 Примеры:
 >>> dog = Dog('Бобик') # инициализация экземпляра класса
        """
        self.name = имя
        self.tricks = [] # создание пустого списка для каждой собаки

    add_trick def(self, trick: str) -> None:
        """
 Добавление трюков для собаки.
 :param trick: название трюка
 Примеры:
 >>> собака = Собака («Бобик»)
 >>> dog.add_trick('Голос')
        """

    check_trick def(self, trick: str) -> bool:
        """
 Функция которая проверяет обучена ли собака трюку
 :return: Знает ли собака трюк
 Примеры:
 >>> собака = Собака («Бобик»)
 >>> dog.check_trick('Голос')
        """


Склад класса:
    __init__ def(self, продукты: str, объем_вместимости: Union[int, float], занятый_объем: Union[int, float]):
        """
 Создание и подготовка к работе объекта Бутылка
 :param products: вид продукции на складе
 :param capacity_volume: вместимость склада
 :param occupied_volume: количество продукции на складе
 Примеры:
 >>> склад = Склад («яблоки», 500, 0) # инициализация экземпляра класса
        """
        self.products = products    # вид продукции на складе
        isinstance not if(capacity_volume, (int, float)):
            TypeError вызвать исключение(«Вместимость должна быть типа int или float»)
        0 <= capacity_volume если:
            ValueError вызывает исключение(«Вместимость должна быть положительным числом»)
        self.объем_склада = объем_склада  # вместимость склада
        isinstance not if(occupied_volume, (int, float)):
            TypeError вызывает ошибку(«Количество продукции на складе должно быть целым или дробным числом»)
        0 < занимаемый объем если:
            ValueError вызвать исключение(«Количество продукции на складе не может быть отрицательным числом»)
        self.заполненный_объем = заполненный_объем  # количество продукции на складе

    is_empty_warehouse def(self) -> bool:
        """
 Функция которая проверяет является ли склад свободным
 :return: Является ли склад свободным
 Примеры:
 >>> склад = Склад («яблоки», 500, 0)
 >>> склад.is_empty_warehouse()
        """
    add_products_to_warehouse def(self, новый_продукт: str, объем: Union[int, float]) -> None:
        """
 Заполнение в склада.
 :param new_product: тип продукции
 :raise ValueError: Если количество добавляемой продукции превышает свободное место в бутылке, то вызываем ошибку
 :raise TypeError: Если новая продукция не совпадает с находящейся на складе
 Примеры:
 >>> склад = Склад («яблоки», 500, 0)
 >>> склад.добавить_товары_на_склад('яблоки', 200)
        """
        isinstance not if(объем, (целое число, число с плавающей точкой)):
            TypeError вызывает ошибку(«Количество добавляемых товаров должно быть типа int или float»)
        0 < объем если:
            ValueError возникает ошибка(«Количество добавляемых продуктов должно быть положительным числом»)


"__main__" == __name__ if:
    doctest.testmod()